class NexposeController < ApplicationController

def initialize(server='127.0.0.1', port=443)
# Called by everything in this controller

        #server='127.0.0.1' ;port=443
        nexpose_username = File.read("lib/nexpose_username.txt").gsub("\n", "")
        nexpose_password = File.read("lib/nexpose_password.txt").gsub("\n", "")

        @nsc = Nexpose::Connection.new(server, nexpose_username, nexpose_password, port)
        @nsc.login

        @base_api_url          = Setting.where(key:"uber_api_url")[0].value
        @uber_url              = Setting.where(key:"uber_url")[0].value
        @lc_production_dns_domain = Setting.where(key:"production_dns_domain")[0].value
        @lc_description        = Setting.where(key:"description")[0].value
        @lc_short_code         = Setting.where(key:"short_code")[0].value

end

def dump_vulns_per_srvtype
	@nsc.list_sites.each do | site |
		if site.name.include? "PURPOSE-"
			siteID = site.id
			siteName = site.name
			siteName.slice! "PURPOSE-"
			output = File.open("app/assets/data/srvtype/" + siteName + ".csv","w" )
			puts "site ID: " + siteID.to_s + ", site name: " + siteName
		
			@nsc.list_assets(siteID).each do | device |
				deviceID = device.id
				deviceAddress = device.address
				puts "device ID: " + deviceID.to_s + ", device address: " + deviceAddress.to_s
			
				@nsc.list_device_vulns(deviceID).each do | vuln |
					severity = vuln.severity
					if severity >= 8
						severity = "Critical"
					elsif severity >= 4
						severity = "Severe"
					elsif severity < 4
						severity = "Moderate"
					end
					output.puts siteName + "," + deviceAddress.to_s + "," + vuln.title + "," + vuln.risk.to_s + "," + severity.to_s
#					puts siteName + "," + deviceAddress.to_s + "," + vuln.title + "," + vuln.risk.to_s + "," + severity.to_s
				end
			end
		output.close
		end
	end
end

def dump_recent_risk_scores	
	output = File.open( "output.csv","w" )
	output.puts "Server Type,Assets Discovered, Total Risk,Avg. Risk per Asset,color,Last Avg. Risk per Asset,% chg."

	@nsc.list_sites.each do | site |
		currMonth = Time.now.mon
		lastMonth = (Time.now - 1.month).mon
		# 0th element of the array should always be the most recent scan
       		lastCompleteScan = @nsc.completed_scans(site.id).select { |scan| scan.start_time.mon == currMonth  && scan.status == :completed }[0]
		secondToLastCompleteScan = @nsc.completed_scans(site.id).select { |scan| scan.start_time.mon == lastMonth && scan.status == :completed }[1]

       		unless lastCompleteScan.nil?
			# only grab sites with the phrase "PURPOSE-" in the name
			if site.name.include? "PURPOSE-" 
				# generate metrics, store in variables
				siteName = site.name
				siteName.slice! "PURPOSE-"
				assetCount = lastCompleteScan.assets
				riskScore = lastCompleteScan.risk_score
				oldAssetCount = secondToLastCompleteScan.assets
				oldRiskScore = secondToLastCompleteScan.risk_score
				avgRiskPerAsset = riskScore / assetCount
				oldAvgRiskPerAsset = oldRiskScore / oldAssetCount
				riskDiff = oldAvgRiskPerAsset - avgRiskPerAsset
				delta = (riskDiff / oldAvgRiskPerAsset) * -1
				delta = delta.round(2)

				# indicate whether trend is positive or negative since last risk measure
				if delta > 0
					color = "red"
				elsif delta < 0
					color = "green"
				# doing it this way also allows us to leave the color set to 'nil' (default is blue) for values of exactly 0
				end

				# pretty print to console
				puts "srvtype " + siteName + "\'s avg. risk score\: " + avgRiskPerAsset.to_s + " (" + delta.to_s + "%) . Last month's avg. risk was " + oldAvgRiskPerAsset.to_s + "."
				# output to csv file
				output.puts siteName + "," + assetCount.to_s + "," + riskScore.to_s + "," + avgRiskPerAsset.to_s + "," + color.to_s + "," +  oldAvgRiskPerAsset.to_s + "," + delta.to_s
			end
		else
			# informational msg, don't print to csv because we don't want that junk data
			puts site.name + " has never been scanned, skipping..."
		end
	end
	output.close
end
	
dump_vulns_per_srvtype
dump_recent_risk_scores
	
end
